#include<bits/stdc++.h>using namespace std;const int maxN = 1e5+5;const int MOD = 1e9+7;const int INF = 1e9+5;// long long digitSum(long long n){// 	long long sum = 0;// 	while(n > 0){// 		sum += (n%10);// 		n /= 10;// 	}// 	return sum;// }// void nextGreater(){// 	stack<int> s;// 	int n;// 	cin >> n;// 	vector<int> v(n);// 	vector<int> nextG(n,-1);// 	for(int i = 0; i < n; i++){// 		cin >> v[i];// 		while(s.size() > 0 && v[s.top()] < v[i]){// 			nextG[s.top()] = i;// 			s.pop();// 		}// 		s.push(i);// 	}// 	// while(s.size() > 0){// 	// 	nextG[s.top()] = -1;// 	// 	s.pop();// 	// }// 	for(int i = 0; i < n; i++){// 		nextG[i] != -1 ? cout << v[nextG[i]] <<" ": cout << -1 <<" ";// 	}// }// class Mex {// private://     map<int, int> frequency;//     set<int> missing_numbers;//     vector<int> A;// public://     Mex(vector<int> const& A) : A(A) {//         for (int i = 0; i <= A.size(); i++)//             missing_numbers.insert(i);//         for (int x : A) {//             frequency[x]++;//             missing_numbers.erase(x);//         }//     }    //     int mex() {//         return *missing_numbers.begin();//     }//     void update(int idx, int new_value) {//         if (--frequency[A[idx]] == 0){//             missing_numbers.insert(A[idx]);//         }//         A[idx] = new_value;//         frequency[new_value]++;//         missing_numbers.erase(new_value);//     }// };vector<bool> is_prime(maxN, true);vector<int> lp(maxN, 0), hp(maxN, 0);void seive(){	is_prime[0] = is_prime[1] = false;	for(int i = 2; i < maxN; i++){		if(is_prime[i]){			hp[i] = lp[i] = i;			for(int j = 2*i; j < maxN; j += i){				is_prime[j] = false;				hp[j] = i;				if(lp[j] == 0){					lp[j] = i;				}			}		}	}}vector<int> prime_fact(int n){	vector<int> prime_factors;	int pr_fact;	while(n > 1){		pr_fact = hp[n];		while(n % pr_fact == 0){			prime_factors.push_back(pr_fact);			n /= pr_fact;		}	}	return prime_factors;}void solve(){}int main() {    // int tc;    // cin >> tc;    // while(tc--){    //     solve();    // }    // int n;    // cin >> n;    // vector<int> v1(n);    // for(int i = 0; i < n; i++){    // 	cin >> v1[i];    // }    // Mex M(v1);    // cout << M.mex() <<"\n";    seive();    int a;    cin >> a;    auto v = prime_fact(a);    for(auto elmt : v){    	cout << elmt <<" ";    }}